// Servo - Version: Latest
#include <Servo.h>
#include <math.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/434e7218-2cf7-4aaf-a4aa-31bba094b7e0

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float x;
  float y;
  float z;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

Servo servo0, servo1, servo2, servo4;

float d1, d2, arm_length = 1, a0, m, t1, t2, a1, a2, a4, pi = 3.14159265359, x1 = 1, y2 = 1, z1 = 1;

void setup()
{
    // Initialize serial and wait for port to open:
    Serial.begin(9600);
    servo0.attach(13);
    servo1.attach(12);
    servo2.attach(14);
    servo4.attach(26);

    // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
    delay(1500);

    // Defined in thingProperties.h
    initProperties();

    // Connect to Arduino IoT Cloud
    ArduinoCloud.begin(ArduinoIoTPreferredConnection);

    /*
       The following function allows you to obtain more information
       related to the state of network and IoT Cloud connection and errors
       the higher number the more granular information youâ€™ll get.
       The default is 0 (only errors).
       Maximum is 4
   */
    setDebugMessageLevel(2);
    ArduinoCloud.printDebugInfo();
}

void loop()
{
    ArduinoCloud.update();
    // Your code here
    Serial.println(x1);
    Serial.println(y2);
    Serial.println(z1);
    Serial.println("-------");
    d2 = sqrt(pow(x1, 2) + pow(y2, 2) + pow(z1, 2));
    if (d2 < arm_length * 2 && d2 > 0)
    {
        // Formula ...................
        d1 = sqrt(pow(x1, 2) + pow(y2, 2));
        if (d1 == 0)
        {
            d1 = 0.0001;
        }
        a0 = acos(x1 / d1);

        m = d2 / 2;
        t1 = acos(m / arm_length);
        if (d2 == 0)
        {
            d2 = 0.0001;
        }
        t2 = acos(d1 / d2);
        a1 = t1 + t2;
        a2 = pi - 2 * t1;
        a4 = ((3 * pi / 2) - a1 - a2);
        // --------------------------

        // Converting Radian to degree.
        a0 = a0 * (180 / pi);
        a1 = a1 * (180 / pi);
        a2 = a2 * (180 / pi);
        a4 = a4 * (180 / pi);
        // ------------------------

        // Angles are given to Servos.
        servo0.write(a0);
        servo1.write(a1);
        servo2.write(a2);
        servo4.write(a4);
        // ------------------------
    }
    else
    {
        Serial.println("*****Invalid point*****");
    }
}

/*
  Since X is READ_WRITE variable, onXChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onXChange()
{
    // Add your code here to act upon X change
    x1 = x;
}
/*
  Since Y is READ_WRITE variable, onYChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onYChange()
{
    // Add your code here to act upon Y change
    y2 = y;
}
/*
  Since Z is READ_WRITE variable, onZChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onZChange()
{
    // Add your code here to act upon Z change
    z1 = z;
}